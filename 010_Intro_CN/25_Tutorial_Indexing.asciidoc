=== 适应环境

为了对Elasticsearch究竟能干些什么事以及究竟有多好用给你一个直观的感受，让我们
开始浏览一个简单的手册，它包括 _索引(index)_, _搜索(search)_ 和 _聚集(aggregations)_
等基本概念。

我们将开始介绍一些新的术语以及一些基本的概念，即使不是立刻就能明白也没关系。在
这里介绍的概念在本书的后面会有进一步更深入的讲解。

所以，放松心情享受一个关于Elasticsearch究竟能干什么的快速介绍。

==== 让我们创建一个员工目录

我曾今在 **Megacorp** 工作过，作为人力资源的新人，我曾经被分配了创建员工目录的任务。
这个目录旨在培养员工的同理心以及实时协同动态工作，所以它有一些不同的业务需求：

* 数据能包含多个值的标签，数字和全文本
* 获取任何员工的具体信息
* 允许结构化搜索，比如搜索年龄大于30岁的员工
* 允许简单的全文搜索和复杂的阶段搜索
* 高亮显示匹配文档中的搜索词
* 能够管理对数据创建分析仪表板

=== 索引员工文档

业务最重要的事就是存储员工数据。 这将使用一种 ``员工文档''的形式，即每个文档代表一个员工。
把数据存储进Elasticsearch的行为叫做 _索引_，但是在我们索引一个文档之前我们得决定把它存在
 _哪里_ 。

在Elasticsearch里，文档属于一个 _类型_， 这些类型存在于一个 _索引_里。这能够传统的关系型
数据库做一些对应

    关系数据库      =>  数据库  =>  表      =>  行      =>  列
    Elasticsearch   =>  索引    =>  类型    =>  文档    =>  字段

一个Elasticsearch集群能够包含多个 _索引_ (数据库), 索引又可以包含多个 _类型_ (表)。这些类型
包含多个 _文档_ (行)，每个文档又包含多个 _字段_ （列）。

.索引 vs 索引 vs 索引
**************************************************

你可能已经注意到 `索引` 这个词在Elastic中包含了多种意思。所以我们在这做一点说明是有必要的:

索引 (名词)::

就像上面解释过的，一个 _索引_ 就想一个传统关系数据库中的 _数据库_。它使一个用来存储文档的
地方。名词 _index_ 的复数形式是 _indices_ 或者 _indexes_ 。

索引（动词）::

___``索引一个文档''__ 是指把一个文档存储到一个 _索引(名词)_ 里，然后它能够被获取和查询。它
非常像SQL里的 `INSERT` 关键词，只不过如果文档已经存在，它会用心的文档替换老的文档。

倒排索引::

关系数据库给一个特定的列增加索引，比如B-树索引，是为了提高数据获取的速度。Elasticsearch和
Lucene使用一个叫做 _倒排索引_的结构来达到同样的目的。
+
默认情况下，文档里的每个字段都被 _索引_ 了（有一个倒排索引），因此都是可以被查找到的。如果
一个字段没有倒排索引是不会被查找到的，我们将在 <<inverted-index>> 部分对倒排索引有更详细的
讨论。

**************************************************
所以对于我们的的员工目录，我们将做如下的操作:

*  每个员工索引一个 _文档_，它包含了一个员工的所有具体信息。
*  每个文档都在 `员工` _类型_里
*  类型是包含在 `megacorp` _索引_里
*  索引将被放在我们的Elasticsearch集群里。

实际上，完成上述的操作是十分容易的（虽然看起来有很多步）。我们能用如下所示的一条语句执行上
述的所有操作：

[source,js]
--------------------------------------------------
PUT /megacorp/employee/1
{
    "first_name" : "John",
    "last_name" :  "Smith",
    "age" :        25,
    "about" :      "I love to go rock climbing",
    "interests": [ "sports", "music" ]
}
--------------------------------------------------
// SENSE: 010_Intro/25_Index.json

注意到这个路径 `/megacorp/employee/1` 包含了3个方面的信息：

[horizontal]
*megacorp*::    索引名字
*employee*::    类型名字
*1*::           某个员工的ID

请求体部分 --是一个JSON文档-- 包含了员工的所有信息。他的名字是 ``John Smith'',
他25岁并且喜欢攀岩。

简单！一开始没有必要执行任何管理任务，比如创建一个索引或者指定每个字段包含的数
据的类型。我们直接就索引了一个文档。Elasticsearc默认为了做好了所有的事情。所以，
所有的必要的管理工作都是在后台完成的，使用了默认值。

在我们继续往下学习之前，我们先给目录多增加一些员工：

[source,js]
--------------------------------------------------
PUT /megacorp/employee/2
{
    "first_name" :  "Jane",
    "last_name" :   "Smith",
    "age" :         32,
    "about" :       "I like to collect rock albums",
    "interests":  [ "music" ]
}

PUT /megacorp/employee/3
{
    "first_name" :  "Douglas",
    "last_name" :   "Fir",
    "age" :         35,
    "about":        "I like to build cabinets",
    "interests":  [ "forestry" ]
}
--------------------------------------------------
// SENSE: 010_Intro/25_Index.json



