=== 分析

终于，我们来到了我们的最后一个业务需求：允许管理人员对员工目录进行分析。Elasticsearch
有一个被称为 _聚合_ 的功能，它能对数据进行复杂的分析。类似于SQL里面的 `GROUP BY`，但是
功能更强大。

比如，让我们找出员工们最喜欢的兴趣爱好：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
  "aggs": {
    "all_interests": {
      "terms": { "field": "interests" }
    }
  }
}
--------------------------------------------------
// SENSE: 010_Intro/35_Aggregations.json

现在先忽略语法只是看下结果：

[source,js]
--------------------------------------------------
{
   ...
   "hits": { ... },
   "aggregations": {
      "all_interests": {
         "buckets": [
            {
               "key":       "music",
               "doc_count": 2
            },
            {
               "key":       "forestry",
               "doc_count": 1
            },
            {
               "key":       "sports",
               "doc_count": 1
            }
         ]
      }
   }
}
--------------------------------------------------

我们可以看到2个员工对音乐感兴趣，一个对林业感兴趣，还有1个对运动感兴趣。这些聚合
不是提前计算好的 -- 他们是根据匹配当前查询的文档飞速计算出来的。如果我们想知道名
为 ``Smith'' 的员工的兴趣爱好，我们只需要往查询里增加一点合适的条件就行：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
  "query": {
    "match": {
      "last_name": "smith"
    }
  },
  "aggs": {
    "all_interests": {
      "terms": {
        "field": "interests"
      }
    }
  }
}
--------------------------------------------------
// SENSE: 010_Intro/35_Aggregations.json

这个 `all_interests` 聚集被改成了只包含跟查询匹配的文档：

[source,js]
--------------------------------------------------
  ...
  "all_interests": {
     "buckets": [
        {
           "key": "music",
           "doc_count": 2
        },
        {
           "key": "sports",
           "doc_count": 1
        }
     ]
  }
--------------------------------------------------

聚集也可以进行分层的归纳。比如，我们要查找具有相同特定兴趣的员工的平均年龄：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
    "aggs" : {
        "all_interests" : {
            "terms" : { "field" : "interests" },
            "aggs" : {
                "avg_age" : {
                    "avg" : { "field" : "age" }
                }
            }
        }
    }
}
--------------------------------------------------
// SENSE: 010_Intro/35_Aggregations.json

我们获得的结果就变得有点复杂了，但是仍然是很好理解：

[source,js]
--------------------------------------------------
  ...
  "all_interests": {
     "buckets": [
        {
           "key": "music",
           "doc_count": 2,
           "avg_age": {
              "value": 28.5
           }
        },
        {
           "key": "forestry",
           "doc_count": 1,
           "avg_age": {
              "value": 35
           }
        },
        {
           "key": "sports",
           "doc_count": 1,
           "avg_age": {
              "value": 25
           }
        }
     ]
  }
--------------------------------------------------

这个输出是我们运行的第一个聚合的加强版。我们仍然能得到一系列的兴趣以及它们
的个数，但是每个兴趣多了一个 `avg_age` ，这个表示的是所有具有那个兴趣的员工
的平均年龄。

即使你现在还不理解语法，你仍然能很容易的看到通过这个属性能完成各种非常复杂的
聚合和分组。任何类型的数据都可以提取。天空才是它的极限。

