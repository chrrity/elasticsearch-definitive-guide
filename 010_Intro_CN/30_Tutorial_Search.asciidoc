=== 获取一个文档

现在我们已经有一些数据在Elasticsearch里，我们现在可以专注于这个应用的业务需求。
第一个需求就是能够获取每个员工的数据。

在Elasticsearch里这是非常简单的。我们只需要执行HTTP GET请求指定document的 ``地址''
--index，type和id。使用这3个信息，我们能获得原始的JSON document：

[source,js]
--------------------------------------------------
GET /megacorp/employee/1
--------------------------------------------------
// SENSE: 010_Intro/30_Get.json

响应结果包含了document的一些元数据，关于员工 John Smith的原始JSON document在
`_source`字段里。

[source,js]
--------------------------------------------------
{
  "_index" :   "megacorp",
  "_type" :    "employee",
  "_id" :      "1",
  "_version" : 1,
  "found" :    true,
  "_source" :  {
      "first_name" :  "John",
      "last_name" :   "Smith",
      "age" :         25,
      "about" :       "I love to go rock climbing",
      "interests":  [ "sports", "music" ]
  }
}
--------------------------------------------------

****
同样的方法，我们把HTTP操作从 `PUT` 改成 `GET`是为了获取document，我们也能用
 `DELETE`操作去删除文档，以及 `HEAD`操作去检查document是否存在。如果我们想用
 新的值替代已经存在的document，我们只需要再 `PUT`一次就可以。

****

=== 搜索简介

 `GET`是非常简单的 -- 你能获取到你想查找的document。让我们试试更高级的一些东西，
 比如简单的搜索！

我们第一个要尝试的搜索可能是最简单的一个搜索。我们将用如下的请求来获取所有的员工：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
--------------------------------------------------
// SENSE: 010_Intro/30_Simple_search.json

你可以看到我们仍然使用 index `megacorp` 和 type `employee`, 但是我们不是指定一个
document ID，而是使用 `_search`作为结束。这个命令的响应的 `hit`数组包含了我们的
所有的3个document。默认情况下，查询结果只会返回前10个。

[source,js]
--------------------------------------------------
{
   "took":      6,
   "timed_out": false,
   "_shards": { ... },
   "hits": {
      "total":      3,
      "max_score":  1,
      "hits": [
         {
            "_index":         "megacorp",
            "_type":          "employee",
            "_id":            "3",
            "_score":         1,
            "_source": {
               "first_name":  "Douglas",
               "last_name":   "Fir",
               "age":         35,
               "about":       "I like to build cabinets",
               "interests": [ "forestry" ]
            }
         },
         {
            "_index":         "megacorp",
            "_type":          "employee",
            "_id":            "1",
            "_score":         1,
            "_source": {
               "first_name":  "John",
               "last_name":   "Smith",
               "age":         25,
               "about":       "I love to go rock climbing",
               "interests": [ "sports", "music" ]
            }
         },
         {
            "_index":         "megacorp",
            "_type":          "employee",
            "_id":            "2",
            "_score":         1,
            "_source": {
               "first_name":  "Jane",
               "last_name":   "Smith",
               "age":         32,
               "about":       "I like to collect rock albums",
               "interests": [ "music" ]
            }
         }
      ]
   }
}
--------------------------------------------------

注意：这个响应结果不但告诉我们哪些document是匹配的，也包含了整个document本身：
所有的跟我们需要显示给用户的搜索结果相关的信息。

接下来，让我们试试搜索姓是 ``Smith'' 的员工。为了这个，我们使用一个 ``轻量级''
的搜索方法，它在命令行使用很方便。这种方法经常被称为 _query string_ 搜索，因为
我们给搜索请求加了个URL查询字符串参数：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search?q=last_name:Smith
--------------------------------------------------
// SENSE: 010_Intro/30_Simple_search.json

我们同样使用 `_search` 作为路径的结尾，然后我们在 `q=` 部分加上要查询的条件。
查询结果显示了所有姓氏为 `Smith` 的员工：

[source,js]
--------------------------------------------------
{
   ...
   "hits": {
      "total":      2,
      "max_score":  0.30685282,
      "hits": [
         {
            ...
            "_source": {
               "first_name":  "John",
               "last_name":   "Smith",
               "age":         25,
               "about":       "I love to go rock climbing",
               "interests": [ "sports", "music" ]
            }
         },
         {
            ...
            "_source": {
               "first_name":  "Jane",
               "last_name":   "Smith",
               "age":         32,
               "about":       "I like to collect rock albums",
               "interests": [ "music" ]
            }
         }
      ]
   }
}
--------------------------------------------------

=== 使用Query DSL进行搜索

Query-string搜索在命令行做 _临时_ 搜索的时候很方便，但是它有它的局限(见 <<search-lite>>)。
Elasticsearch提供了一个丰富的灵活的查询语言叫 _Query DSL_, 它允许我们构建更复杂更健壮的
查询。

DSL(_Domain Specific Language_)使用了一个JSON的请求体。我们能把上面那个查询
所有姓氏为Smith的请求表示为：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
    "query" : {
        "match" : {
            "last_name" : "Smith"
        }
    }
}
--------------------------------------------------
// SENSE: 010_Intro/30_Simple_search.json

这个请求和上个请求的返回结果是一样的。你可以发现这个查询变化挺多。首先，我们不再
使用 __query string_ 参数，代替的时一个请求体。这个请求体是JSON格式的，然后使用了
一个 `match` 查询(查询的一种，我们会再后面学到)。

=== 更复杂的搜索

让我们把搜索稍微变得复杂一点。我们仍然是要找出所有姓氏是 `Smith` 的员工，但是我们
只要那个年纪大于30岁的。我们的查询将会做一点改变使它变成一个  _filter_ 。filter可
以高效的执行结构化的搜索。

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : {
                    "age" : { "gt" : 30 } <1>
                }
            },
            "query" : {
                "match" : {
                    "last_name" : "smith" <2>
                }
            }
        }
    }
}
--------------------------------------------------
// SENSE: 010_Intro/30_Query_DSL.json

<1> 这部分查询是一个 `范围` _filter_, 它将发现所有年纪大于30岁的 -- `gt` 表示 ``大于'' 
<2> 这部分查询和我们上面用的 `match` 查询是一样的。

现在不用太担心语法，我们在后面会有更详细的讲解。只要知道我们增加了一个 _filter_ 进行了
一个范围搜索，并且重用了前面的 `match` 查询。现在我们拿到结果只有一名员工，他正好是32岁
并且他的名字是 ``Jane Smith''。

[source,js]
--------------------------------------------------
{
   ...
   "hits": {
      "total":      1,
      "max_score":  0.30685282,
      "hits": [
         {
            ...
            "_source": {
               "first_name":  "Jane",
               "last_name":   "Smith",
               "age":         32,
               "about":       "I like to collect rock albums",
               "interests": [ "music" ]
            }
         }
      ]
   }
}
--------------------------------------------------

=== 全文搜索

到现在为止搜索还是挺简单的：单个名字，过滤年纪。我们尝试一个更高级的全文搜索--一个对于
传统数据库很困难的一个任务。

我们将要查找所有喜欢 ``rock climbing'' 的员工：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
    "query" : {
        "match" : {
            "about" : "rock climbing"
        }
    }
}
--------------------------------------------------
// SENSE: 010_Intro/30_Query_DSL.json

你可以看到我们使用了和前面相同的 `match`查询在 `about`字段搜索 ``rock climbing''。我们
取回了2个匹配的document：

[source,js]
--------------------------------------------------
{
   ...
   "hits": {
      "total":      2,
      "max_score":  0.16273327,
      "hits": [
         {
            ...
            "_score":         0.16273327, <1>
            "_source": {
               "first_name":  "John",
               "last_name":   "Smith",
               "age":         25,
               "about":       "I love to go rock climbing",
               "interests": [ "sports", "music" ]
            }
         },
         {
            ...
            "_score":         0.016878016, <1>
            "_source": {
               "first_name":  "Jane",
               "last_name":   "Smith",
               "age":         32,
               "about":       "I like to collect rock albums",
               "interests": [ "music" ]
            }
         }
      ]
   }
}
--------------------------------------------------
<1> 表示相关性评分

默认情况下，Elasticsearch会根据相关性得分对匹配的结果进行排序。相关性评分
指的时每个document和查询的匹配程度。第一个并且是得分最高的结果很明显：John
Smith的 `about`字段明显包含了 ``rock climbing''。

但是为什么Jane Smith也会被作为一个结果返回？她也会被返回的原因是 ``rock''
在她的 `about` 字段被提到了。又因为只有 ``rock'' 被提到了，没有 ``climbing'',
所以她的得分比John低。

这是一个显示Elasticsearch如何在全文字段里搜索并优先返回最相关的结果的好例子。
 _相关性_ 是Elasticsearch非常重要的一个概念，跟传统关系型数据库那种一条记录要
 么匹配要么不匹配是完全不同的一种概念。
This is a good example of how Elasticsearch can search *within* full text
fields and return the most relevant results first. This concept of _relevance_
is important to Elasticsearch, and is a concept that is completely foreign to
traditional relational databases where a record either matches or it doesn't.

=== 短语搜索

在一个字段里找到单独的词是很好，但是有时你会像去匹配一系列的词或者 _短语_ 。
比如，我们能够执行一个差选只匹配同时包含 ``rock'' _和_ ``climbing'' ，并且这2
个词是在短语 ``rock climbing'' 里靠在一起的。

为了查询这个，我们用了 `match`查询的一个轻微变体，称为 `match_phrase` 查询：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
    "query" : {
        "match_phrase" : {
            "about" : "rock climbing"
        }
    }
}
--------------------------------------------------
// SENSE: 010_Intro/30_Query_DSL.json

毫不意外，只返回了关于John Smith的document。

[source,js]
--------------------------------------------------
{
   ...
   "hits": {
      "total":      1,
      "max_score":  0.23013961,
      "hits": [
         {
            ...
            "_score":         0.23013961,
            "_source": {
               "first_name":  "John",
               "last_name":   "Smith",
               "age":         25,
               "about":       "I love to go rock climbing",
               "interests": [ "sports", "music" ]
            }
         }
      ]
   }
}
--------------------------------------------------

[[highlighting-intro]]
=== 高亮显示我们的搜索
许多应用喜欢 _高亮显示_ 每个搜索结果的文本片段让用户能够很快明白 *为什么* 这个
document配置他们的查询。在Elasticsearch里后去高亮片段是非常简单的。
Many applications like to _highlight_ snippets of text from each search result
so that the user can see *why* the document matched their query.  Retrieving
highlighted fragments is very easy in Elasticsearch.

让我们重新执行下上面的查询，但是加上一个新的 `highlight` 参数：

[source,js]
--------------------------------------------------
GET /megacorp/employee/_search
{
    "query" : {
        "match_phrase" : {
            "about" : "rock climbing"
        }
    },
    "highlight": {
        "fields" : {
            "about" : {}
        }
    }
}
--------------------------------------------------
// SENSE: 010_Intro/30_Query_DSL.json

当我们执行这个查询时，命中的结果和之前是一样的，但是现在我们在响应里获得了一
个名为 `highlight` 的新部分。它包含了 `about` 字段中的文本片段，其中匹配的词
用HTML标签 `<em></em>` 包起来。

[source,js]
--------------------------------------------------
{
   ...
   "hits": {
      "total":      1,
      "max_score":  0.23013961,
      "hits": [
         {
            ...
            "_score":         0.23013961,
            "_source": {
               "first_name":  "John",
               "last_name":   "Smith",
               "age":         25,
               "about":       "I love to go rock climbing",
               "interests": [ "sports", "music" ]
            },
            "highlight": {
               "about": [
                  "I love to go <em>rock</em> <em>climbing</em>" <1>
               ]
            }
         }
      ]
   }
}
--------------------------------------------------

<1> 原始文本中的高亮片段
