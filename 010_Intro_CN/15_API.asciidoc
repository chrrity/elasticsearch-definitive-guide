=== 和Elasticsearch交互

怎么和Elasticsearch交互取决于你是否使用Java。

==== Java API

如果你正在使用Java，Elasticsearch有2个内置客户端可以在你自己的代码里使用：

节点客户端(Node client)::
    节点客户端以 _非数据节点_ 的方式加入到本地的集群。也就是说它不保存任何
    数据，但是它知道数据存在于集群的哪个节点上，并且能够将请求转发到正确的
    节点上去。

传输客户端(Transport client)::
    轻量级的传输客户端能够给远程集群发送请求。它本身并不加入集群，只是简单
    的将请求转发到集群的一个节点。

这2个客户端都是使用Elasticsearch自有的 _transport_ 协议和集群的 *9300端口*
进行通信。集群里的节点也是通过9300端口互相通信。如果这个端口没有打开，这些
节点就不能形成一个集群。

[TIP]
====
Java客户端必须和Elastsearch的节点是同一个版本，否则他们可能不能进行通信。 

====

更多关于Java客户端的信息可以从这个 http://www.elasticsearch.org/guide/[Guide]
文档的Java API部分获得

==== RESTful API with JSON over HTTP

任何其他语言都可以使用你喜欢的网页客户端可以访问的RESTful API通过 *9200端口* 
和Elasticsearch通信。实际上，就像你在上面看到的，你甚至可以从命令行通过 `curl`
命令和Elasticsearch通信。

**************************************************

Elasticsearch给几种语言提供了官方的客户端，还有喝多社区提供的客户端和集成，这
些都可以在这个 http://www.elasticsearch.org/guide/[Guide]文档里找到。

**************************************************

给Elasticsearch的请求和任何HTTP请求包含的部分是相同的。比如，去计算集群里文档
的个数，我们可以使用如下的命令：

[source,js]
--------------------------------------------------
      <1>     <2>                     <3>    <4>
curl -XGET 'http://localhost:9200/_count?pretty' -d '
{  <5>
    "query": {
        "match_all": {}
    }
}
'
--------------------------------------------------
<1> 适当的HTTP _方法_ 或者 _动作_ ： `GET`, `POST`, `PUT`, `HEAD` 或者 `DELETE` 
<2> 集群任意节点的协议、主机名和端口。
<3> 请求的路径。
<4> 任意可选的查询字符串参数，比如 `?pretty` 将会 _漂亮的打印_ JSON格式的响应使
    它更容易阅读
<5> JSON格式的请求包体(如果请求需要的话)

Elasticsearch返回一个像 `200 OK` 的状态码和一个JSOn格式的响应( `HEAD` 请求除外)。
上面的 `curl` 请求将返回一个如下的JSON格式的响应：

[source,js]
--------------------------------------------------
{
    "count" : 0,
    "_shards" : {
        "total" : 5,
        "successful" : 5,
        "failed" : 0
    }
}
--------------------------------------------------

我们在响应里没有看到HTTP头是因为我们么有告诉 `curl` 去显示头。如果想显示HTTP头，
可以给 `curl` 命令加上 `-i` 参数，如下所示：

[source,js]
--------------------------------------------------
curl -i -XGET 'localhost:9200/'
--------------------------------------------------

这本书的剩余部分，我们将会缩写 `curl` 命令的例子，去掉那些每个请求都一样的部分，
比如主机名、端口以及 `curl` 命令本身。比如下面这个请求：

[source,js]
--------------------------------------------------
curl -XGET 'localhost:9200/_count?pretty' -d '
{
    "query": {
        "match_all": {}
    }
}'
--------------------------------------------------

我们将显示的缩略形式如下：

[source,js]
--------------------------------------------------
GET /_count
{
    "query": {
        "match_all": {}
    }
}
--------------------------------------------------
// SENSE: 010_Intro/15_Count.json

事实上，这个格式和我们之前跟 <<marvel,Marvel>>一起安装的Sense终端使用的格式是一样的。
你可以通过点击上面的 ``View in Sense'' 链接来打开Sense并在里面运行这个例子代码。
