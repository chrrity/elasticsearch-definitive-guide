=== Exact values vs. Full text

ElasticSearch里面的数据可以概括的分为2种类型： _exact values_ (精确值)和 _full text_ (全文本).
Exact Values正如它字面所说的那样，表示精确值。可以是一个日期或者一个用户ID，
也可以是具体的字符串，比如一个用户名或者一个email地址。
比如，exact value `"Foo"` 和exact value `"foo"` 是不一样的.
exact value `2014` 和exact value `2014-09-15` 也是不一样的.

Full text, 通常指的是字符型数据 -- 通常使用某种人类语言写的-- 就像1条推特的
文字或者一个邮件的内容。

****

Full text 通常指的是非结构化数据( ``unstructured data''), 但这是个误解。
-- 自然语言是高度结构化的. 问题是自然语言的规则非常复杂，导致计算机很难
正确的解析它们。比如，下面这个句子：

    May is fun but June bores me.

这里面的May和June指的是月份呢还是人？
****

Exact values很容易去查询. 结果只有2种可能 -- 结果要么和查询匹配要么和查询不匹配。
这种查询用SQL表示很容易：

[source,js]
--------------------------------------------------
WHERE name    = "John Smith"
  AND user_id = 2
  AND date    > "2014-09-15"
--------------------------------------------------

查询full text数据就比较微妙。我们不只是简单的问 ``这个文档是否匹配这个查询''
this document match the query'', 而且还要问 ``这个文档和查询匹配的有多好''.
也就是说，这个文档和给出的查询有多 _相关_.

We seldom want to match the whole full text field exactly.  Instead, we want
to search *within* text fields. Not only that, but we expect search to
understand our *intent*:

* a search for `"UK"` should also return documents mentioning the `"United
  Kingdom"`

* a search for `"jump"` should also match `"jumped"`, `"jumps"`, `"jumping"`
  and perhaps even `"leap"`

* `"johnny walker"` should match `"Johnnie Walker"` and `"johnnie depp"`
  should match `"Johnny Depp"`

* `"fox news hunting"` should return stories about hunting on Fox News,
  while `"fox hunting news"` should return news stories about fox hunting.

In order to facilitate these types of queries on full text fields,
Elasticsearch first _analyzes_ the text, then uses the results to build
an _inverted index_. We will discuss the inverted index and the
analysis process in the next two sections.







