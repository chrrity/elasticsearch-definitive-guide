=== Exact values vs. Full text

ElasticSearch里面的数据可以概括的分为2种类型： _exact values_ (精确值)和
_full text_ (全文本).
Exact Values正如它字面所说的那样，表示精确值。可以是一个日期或者一个用户ID，
也可以是具体的字符串，比如一个用户名或者一个email地址。
比如，exact value `"Foo"` 和exact value `"foo"` 是不一样的.
exact value `2014` 和exact value `2014-09-15` 也是不一样的.

Full text, 通常指的是字符型数据 -- 通常使用某种人类语言写的-- 就像1条推特的
文字或者一个邮件的内容。

****

Full text 通常指的是非结构化数据( ``unstructured data''), 但这是个误解。
-- 自然语言是高度结构化的. 问题是自然语言的规则非常复杂，导致计算机很难
正确的解析它们。比如，下面这个句子：

    May is fun but June bores me.

这里面的May和June指的是月份呢还是人？
****

Exact values很容易去查询. 结果只有2种可能 -- 结果要么和查询匹配要么和查询不匹配。
这种查询用SQL表示很容易：

[source,js]
--------------------------------------------------
WHERE name    = "John Smith"
  AND user_id = 2
  AND date    > "2014-09-15"
--------------------------------------------------

查询full text数据就比较微妙。我们不只是简单的问 ``这个文档是否匹配这个查询''
而且还要问 ``这个文档和查询匹配的有多好''.也就是说，这个文档和给出的查询有
多 _相关_.

我们很少想去精确的匹配这个full text字段。相反，我们只是想在*文本字段里*搜索。
甚至我们希望搜索能明白我们的*意图*。

* 搜素 `"UK"` 的时候需要返回那些包含 `"United Kingdom"` 的文档。

* 搜索 `"jump"` 的时候同样需要匹配 `"jumped"`, `"jumps"`, `"jumping"` 甚至`"leap"`

* `"johnny walker"` 需要匹配 `"Johnnie Walker"` ，并且 `"johnnie depp"` 需要匹配 `"Johnny Depp"`

* `"fox news hunting"` 需要返回FOX News里面关于打猎的故事，而 `"fox hunting news"` 
需要返回关于狐狸打猎的新闻故事.

为了方便这些在full text字段上的各种查询，Elasticsearch首先对这些文本进行 _分词_ ,
然后使用分词的结果去建立一个 _倒排索引_ 。我们将在接下来的2个部分讨论倒排索引
和分词过程。







